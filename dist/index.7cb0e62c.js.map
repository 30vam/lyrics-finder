{"mappings":"ACKA,MAAM,EAAa,SAAS,aAAa,CAAC,gBACjB,EAAW,aAAa,CAAC,uBAgElD,MAAM,EAAa,AAAC,IAChB,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,EAAI,IAAI,CAAC,EAE5C,QAAQ,GAAG,CAAC,AADF,QAAQ,IAAI,CAAC,sCACT,YAAY,IAAI,GAClC,EAEM,EAAsB,AAAC,IACzB,QAAQ,GAAG,CAAC,4BACZ,EAAM,cAAc,GAEpB,EAAW,wDACf,EAGA,EAAW,gBAAgB,CAAC,SAAU,AAAA,GAAK,EAAoB","sources":["<anon>","src/index.js"],"sourcesContent":["var $35da740d59af89ba$exports = {};\n// Packages\n//import * as cheerio from 'cheerio';\n//const cheerio = require('cheerio');\n// Elements\nconst $35da740d59af89ba$var$searchForm = document.querySelector(\"#search-form\");\nconst $35da740d59af89ba$var$searchQueryInput = $35da740d59af89ba$var$searchForm.querySelector(\"#search-query-input\");\n// Functions\n/*const checkFileValidation = (fileList) => {\r\n    console.log('Checking file format...');\r\n    const allowedTypes = ['audio/mpeg', 'audio/mp4', 'audio/x-m4a', 'audio/mp4a-latm', 'audio/aac', 'application/x-cdf', 'audio/midi', 'audio/x-midi', 'audio/ogg', 'audio/wav', 'audio/3gpp', 'audio/3gpp2', 'audio/aacp', 'audio/adpcm', 'audio/aiff', 'audio/basic', 'audio/midi'];\r\n    const fileSizeLimit = 512 * 1024; // 500KB\r\n    \r\n    for (const file of fileList) {\r\n        if (!allowedTypes.includes(file.type))\r\n            throw new Error (`'${file.name}' couldn't be uploaded, only audio files are supported.`);\r\n\r\n        if (file.size >= fileSizeLimit) \r\n            throw new Error(`'${file.name}' couldn't be uploaded because it is larger than 500KB: ${ Math.round((file.size/(1024 * 1024)) * 100) / 100 } MB.`);\r\n    }\r\n\r\n    console.log('Valid file format.');\r\n    console.log(new FormData(searchForm));\r\n    return;\r\n}\r\n\r\n\r\nconst fileToBase64 = (audioFile) => {\r\n    if (audioFile) {\r\n        const reader = new FileReader();\r\n        \r\n        // Define the onload event to handle the file reading\r\n        reader.onload = function(e) {\r\n            const base64String = e.target.result;\r\n            // You can remove the data URL prefix if only the Base64 part is needed\r\n            const base64Only = base64String.split(',')[1];\r\n            console.log(base64Only); // Output only the Base64 string\r\n        };\r\n\r\n        reader.onerror = function(e) {\r\n            console.log('There was an error reading the file');\r\n        }\r\n        \r\n        // Read the file as a Data URL\r\n        reader.readAsDataURL(audioFile);\r\n    }\r\n}\r\n\r\nconst sendSongDetectionRequest = async (base64) => {\r\n    const axiosConfig = {\r\n        method: 'POST',\r\n        url: 'https://shazam.p.rapidapi.com/songs/detect',\r\n        headers: {\r\n          'x-rapidapi-key': 'e44e1c72e3msh0905c94f0658b24p19be5bjsnc70dafa60c54',\r\n          'x-rapidapi-host': 'shazam.p.rapidapi.com',\r\n          'Content-Type': 'text/plain'\r\n        },\r\n        data: base64\r\n      };\r\n\r\n    try {\r\n        const response = await axios.request(axiosConfig);\r\n        console.log('Upload successful');\r\n        console.log(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}*/ const $35da740d59af89ba$var$findLyrics = (url)=>{\n    console.log(`Finding lyrics for: ${url} ...`);\n    const $ = cheerio.load('<h2 class=\"title\">Hello world</h2>');\n    console.log($(\"h2.title\").text());\n};\nconst $35da740d59af89ba$var$handleSearchRequest = (event)=>{\n    console.log(\"Handling search query...\");\n    event.preventDefault();\n    $35da740d59af89ba$var$findLyrics(`https://genius.com/Metallica-the-unforgiven-ii-lyrics`);\n};\n// Events\n$35da740d59af89ba$var$searchForm.addEventListener(\"submit\", (e)=>$35da740d59af89ba$var$handleSearchRequest(e));\n\n\n//# sourceMappingURL=index.7cb0e62c.js.map\n","// Packages\r\n//import * as cheerio from 'cheerio';\r\n//const cheerio = require('cheerio');\r\n\r\n// Elements\r\nconst searchForm = document.querySelector('#search-form');\r\nconst searchQueryInput = searchForm.querySelector('#search-query-input');\r\n\r\n// Functions\r\n/*const checkFileValidation = (fileList) => {\r\n    console.log('Checking file format...');\r\n    const allowedTypes = ['audio/mpeg', 'audio/mp4', 'audio/x-m4a', 'audio/mp4a-latm', 'audio/aac', 'application/x-cdf', 'audio/midi', 'audio/x-midi', 'audio/ogg', 'audio/wav', 'audio/3gpp', 'audio/3gpp2', 'audio/aacp', 'audio/adpcm', 'audio/aiff', 'audio/basic', 'audio/midi'];\r\n    const fileSizeLimit = 512 * 1024; // 500KB\r\n    \r\n    for (const file of fileList) {\r\n        if (!allowedTypes.includes(file.type))\r\n            throw new Error (`'${file.name}' couldn't be uploaded, only audio files are supported.`);\r\n\r\n        if (file.size >= fileSizeLimit) \r\n            throw new Error(`'${file.name}' couldn't be uploaded because it is larger than 500KB: ${ Math.round((file.size/(1024 * 1024)) * 100) / 100 } MB.`);\r\n    }\r\n\r\n    console.log('Valid file format.');\r\n    console.log(new FormData(searchForm));\r\n    return;\r\n}\r\n\r\n\r\nconst fileToBase64 = (audioFile) => {\r\n    if (audioFile) {\r\n        const reader = new FileReader();\r\n        \r\n        // Define the onload event to handle the file reading\r\n        reader.onload = function(e) {\r\n            const base64String = e.target.result;\r\n            // You can remove the data URL prefix if only the Base64 part is needed\r\n            const base64Only = base64String.split(',')[1];\r\n            console.log(base64Only); // Output only the Base64 string\r\n        };\r\n\r\n        reader.onerror = function(e) {\r\n            console.log('There was an error reading the file');\r\n        }\r\n        \r\n        // Read the file as a Data URL\r\n        reader.readAsDataURL(audioFile);\r\n    }\r\n}\r\n\r\nconst sendSongDetectionRequest = async (base64) => {\r\n    const axiosConfig = {\r\n        method: 'POST',\r\n        url: 'https://shazam.p.rapidapi.com/songs/detect',\r\n        headers: {\r\n          'x-rapidapi-key': 'e44e1c72e3msh0905c94f0658b24p19be5bjsnc70dafa60c54',\r\n          'x-rapidapi-host': 'shazam.p.rapidapi.com',\r\n          'Content-Type': 'text/plain'\r\n        },\r\n        data: base64\r\n      };\r\n\r\n    try {\r\n        const response = await axios.request(axiosConfig);\r\n        console.log('Upload successful');\r\n        console.log(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}*/\r\n\r\nconst findLyrics = (url) => {\r\n    console.log(`Finding lyrics for: ${url} ...`);\r\n    const $ = cheerio.load('<h2 class=\"title\">Hello world</h2>');\r\n    console.log($('h2.title').text());\r\n}\r\n\r\nconst handleSearchRequest = (event) => {\r\n    console.log('Handling search query...');\r\n    event.preventDefault();\r\n\r\n    findLyrics(`https://genius.com/Metallica-the-unforgiven-ii-lyrics`);\r\n}\r\n\r\n// Events\r\nsearchForm.addEventListener('submit', e => handleSearchRequest(e));"],"names":["$35da740d59af89ba$var$searchForm","document","querySelector","$35da740d59af89ba$var$findLyrics","url","console","log","$","cheerio","load","text","$35da740d59af89ba$var$handleSearchRequest","event","preventDefault","addEventListener","e"],"version":3,"file":"index.7cb0e62c.js.map"}