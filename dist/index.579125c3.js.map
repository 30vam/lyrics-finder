{"mappings":"AAAA,WAAW;AACX,qCAAqC;AAErC,WAAW;AACX,MAAM,aAAa,SAAS,aAAa,CAAC;AAC1C,MAAM,mBAAmB,WAAW,aAAa,CAAC;AAElD,YAAY;AACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2DC,GAED,MAAM,YAAY,OAAO;IACrB,MAAM,MAAM,CAAC,yCAAyC,EAAE,UAAU,CAAC;IAEnE,IAAI;QACA,MAAM,WAAW,MAAM,MAAM;QAC7B,IAAI,CAAC,SAAS,EAAE,EACZ,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,CAAC,CAAC;QAE5D,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,MAAM,SAAS,KAAK,MAAM;QAE1B,QAAQ,GAAG,CAAC;QACZ,IAAI,KAAK,MAAM,EACX,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC,CAAC;aAEpC,QAAQ,GAAG,CAAC;IACpB,EACA,OAAO,OAAO;QACV,QAAQ,GAAG,CAAC;IAChB;AACJ;AAEA,MAAM,sBAAsB,CAAC;IACzB,QAAQ,GAAG,CAAC;IACZ,MAAM,cAAc;IAEpB,UAAU;AACd;AAEA,SAAS;AACT,WAAW,gBAAgB,CAAC,UAAU,CAAA,IAAK,oBAAoB","sources":["src/index.js"],"sourcesContent":["// Packages\r\n//import * as cheerio from 'cheerio';\r\n\r\n// Elements\r\nconst searchForm = document.querySelector('#search-form');\r\nconst searchQueryInput = searchForm.querySelector('#search-query-input');\r\n\r\n// Functions\r\n/*const checkFileValidation = (fileList) => {\r\n    console.log('Checking file format...');\r\n    const allowedTypes = ['audio/mpeg', 'audio/mp4', 'audio/x-m4a', 'audio/mp4a-latm', 'audio/aac', 'application/x-cdf', 'audio/midi', 'audio/x-midi', 'audio/ogg', 'audio/wav', 'audio/3gpp', 'audio/3gpp2', 'audio/aacp', 'audio/adpcm', 'audio/aiff', 'audio/basic', 'audio/midi'];\r\n    const fileSizeLimit = 512 * 1024; // 500KB\r\n    \r\n    for (const file of fileList) {\r\n        if (!allowedTypes.includes(file.type))\r\n            throw new Error (`'${file.name}' couldn't be uploaded, only audio files are supported.`);\r\n\r\n        if (file.size >= fileSizeLimit) \r\n            throw new Error(`'${file.name}' couldn't be uploaded because it is larger than 500KB: ${ Math.round((file.size/(1024 * 1024)) * 100) / 100 } MB.`);\r\n    }\r\n\r\n    console.log('Valid file format.');\r\n    console.log(new FormData(searchForm));\r\n    return;\r\n}\r\n\r\n\r\nconst fileToBase64 = (audioFile) => {\r\n    if (audioFile) {\r\n        const reader = new FileReader();\r\n        \r\n        // Define the onload event to handle the file reading\r\n        reader.onload = function(e) {\r\n            const base64String = e.target.result;\r\n            // You can remove the data URL prefix if only the Base64 part is needed\r\n            const base64Only = base64String.split(',')[1];\r\n            console.log(base64Only); // Output only the Base64 string\r\n        };\r\n\r\n        reader.onerror = function(e) {\r\n            console.log('There was an error reading the file');\r\n        }\r\n        \r\n        // Read the file as a Data URL\r\n        reader.readAsDataURL(audioFile);\r\n    }\r\n}\r\n\r\nconst sendSongDetectionRequest = async (base64) => {\r\n    const axiosConfig = {\r\n        method: 'POST',\r\n        url: 'https://shazam.p.rapidapi.com/songs/detect',\r\n        headers: {\r\n          'x-rapidapi-key': 'e44e1c72e3msh0905c94f0658b24p19be5bjsnc70dafa60c54',\r\n          'x-rapidapi-host': 'shazam.p.rapidapi.com',\r\n          'Content-Type': 'text/plain'\r\n        },\r\n        data: base64\r\n      };\r\n\r\n    try {\r\n        const response = await axios.request(axiosConfig);\r\n        console.log('Upload successful');\r\n        console.log(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}*/\r\n\r\nconst getLyrics = async (songTitle) => {\r\n    const url = `https://some-random-api.com/lyrics?title=${songTitle}`;\r\n\r\n    try {\r\n        const response = await fetch(url);\r\n        if (!response.ok)\r\n            throw new Error(`HTTP error! Status: ${response.status}`);\r\n        \r\n        const data = await response.json();\r\n        const lyrics = data.lyrics;\r\n\r\n        console.log(data);\r\n        if (data.lyrics)\r\n            console.log(`Lyrics: ${data.lyrics}`);\r\n        else\r\n            console.log('No lyrics found.');\r\n    } \r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nconst handleSearchRequest = (event) => {\r\n    console.log('Handling search query...');\r\n    event.preventDefault();\r\n\r\n    getLyrics('The Unforgiven II');\r\n}\r\n\r\n// Events\r\nsearchForm.addEventListener('submit', e => handleSearchRequest(e));"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}